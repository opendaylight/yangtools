{
  "comments": [
    {
      "key": {
        "uuid": "fa82b9bf_24f3819f",
        "filename": "yang/yang-model-api/src/main/java/org/opendaylight/yangtools/yang/model/api/SchemaContext.java",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1840
      },
      "writtenOn": "2014-06-19T14:32:52Z",
      "side": 1,
      "message": "Given that this is immutable, the comment that this provides methods for manipulating the top level context is inappropriate. Manipulation implies modification, which we are saying is not possible.\n\nIt would also be a good idea to just state in the comments details about concurrency / thread safety etc. Even though the annotation is there, putting a quick note such as \"Represents a static view of the compiled yang files\" or something similar is helpful. We should write comments such that someone with limited knowledge can quickly understand what is happening.",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_df906245",
        "filename": "yang/yang-model-api/src/main/java/org/opendaylight/yangtools/yang/model/api/SchemaContext.java",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 283
      },
      "writtenOn": "2014-06-20T09:05:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa82b9bf_24f3819f",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_04175da4",
        "filename": "yang/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/impl/YangParserImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 1840
      },
      "writtenOn": "2014-06-19T14:32:52Z",
      "side": 1,
      "message": "I would expand on this comment you added - I realize it was a quick note, but I would add some more content or remove it. This comment as is likely only helpful a select few, and serves to confuse anyone else. :)",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_ffba06bf",
        "filename": "yang/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/impl/YangParserImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 601,
      "author": {
        "id": 283
      },
      "writtenOn": "2014-06-20T09:05:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa82b9bf_04175da4",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_a4b79185",
        "filename": "yang/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/impl/util/URLSchemaContextResolver.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1840
      },
      "writtenOn": "2014-06-19T14:33:47Z",
      "side": 1,
      "message": "I realize that you labeled this as the first round for synchronization - but synchronizing on \"This\" is essentially single threading all access to this class, which will affect performance in the long run.\n\nWhat are the long term plans to implement more targeted synchronization?\n\nAlso, in my opinion it is better to not synchronize on methods. Synchronizing on method level is the same as synchronizing on \"this\" which means that if anyone else synchronizing on your object outside of your class then you can get unintended interference. This is definitely not a blocking point, but wanted to share my experiences. I find it better to create a private Object called lock, and synchronize on that. That way you know you are the only one synchronizing on it. :)",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_bfeb1eaf",
        "filename": "yang/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/impl/util/URLSchemaContextResolver.java",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 283
      },
      "writtenOn": "2014-06-20T09:05:23Z",
      "side": 1,
      "message": "Long term plans are that this piece of code needs refactoring, but that\u0027s outside of the scope of this bug fix. I envision something that would return last good schema snapshot and thus not needing so much locking. I think that building of schema context should be done on a single threaded executor, and registering new URL should return Future object that will contain new schema or failure (eventually). Getting the schema would always return the latest available one. This way synchronization will not be required anymore.",
      "parentUuid": "fa82b9bf_a4b79185",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_84228dff",
        "filename": "yang/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/impl/util/YangSourceContext.java",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1840
      },
      "writtenOn": "2014-06-19T14:32:52Z",
      "side": 1,
      "message": "please use newlines to separate these arguments - took me a minute to figure out these were arguments when just review the change online.",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_5fd21201",
        "filename": "yang/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/impl/util/YangSourceContext.java",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 283
      },
      "writtenOn": "2014-06-20T09:05:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa82b9bf_84228dff",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_2494e1e0",
        "filename": "yang/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/impl/util/YangSourceContext.java",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 1840
      },
      "writtenOn": "2014-06-19T14:32:52Z",
      "side": 1,
      "message": "It doesn\u0027t look like this should be deprecated (I know you didn\u0027t specifically add the tag, but we should clean this up). getValidInputStreams() is used by the method we are telling folks to use, so it looks like the business logic is fine, we just don\u0027t want people accessing the streams directly. If we want to maintain backwards compatibility but deprecate the use of streams then I would move the business intelligence out into a new, private method, and keep the deprecated public API around which is a pass through.\n\nAlso, we don\u0027t need the checkNotNull here, as it is now final and checked in the constructor. Also, I think we want to check the \"isClosed\" here.",
      "revId": "fdcd594396090acf3b336aadb56886af62dbdc53",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}