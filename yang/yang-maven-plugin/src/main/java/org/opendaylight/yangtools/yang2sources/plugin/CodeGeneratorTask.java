/*
 * Copyright (c) 2017 Pantheon Technologies, s.r.o. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.yangtools.yang2sources.plugin;

import com.google.common.base.Preconditions;
import java.io.File;
import java.util.Collection;
import org.apache.maven.model.Resource;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;
import org.opendaylight.yangtools.yang2sources.plugin.ConfigArg.CodeGeneratorArg;
import org.opendaylight.yangtools.yang2sources.spi.BasicCodeGenerator;
import org.opendaylight.yangtools.yang2sources.spi.BuildContextAware;
import org.opendaylight.yangtools.yang2sources.spi.MavenProjectAware;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.sonatype.plexus.build.incremental.BuildContext;

/**
 * Bridge to legacy {@link BasicCodeGenerator} generation.
 *
 * @author Robert Varga
 *
 * @deprecated Scheduled for removal with {@link BasicCodeGenerator}.
 */
@Deprecated
final class CodeGeneratorTask extends AbstractGeneratorTask {
    private static final Logger LOG = LoggerFactory.getLogger(CodeGeneratorTask.class);

    private final BasicCodeGenerator gen;
    private final CodeGeneratorArg cfg;

    private ContextHolder context;
    private File outputDir;

    private CodeGeneratorTask(final BasicCodeGenerator gen, final CodeGeneratorArg cfg) {
        this.gen = Preconditions.checkNotNull(gen);
        this.cfg = Preconditions.checkNotNull(cfg);
    }

    static AbstractGeneratorTask create(final CodeGeneratorArg cfg) throws MojoFailureException {
        cfg.check();

        final String codegenClass = cfg.getCodeGeneratorClass();
        final Class<?> clazz;
        try {
            clazz = Class.forName(codegenClass);
        } catch (ClassNotFoundException e) {
            throw new MojoFailureException("Failed to find code generator class " + codegenClass, e);
        }

        if (!BasicCodeGenerator.class.isAssignableFrom(clazz)) {
            throw new MojoFailureException("Code generator " + clazz + " does not implement "
                    + BasicCodeGenerator.class);
        }

        final BasicCodeGenerator gen;
        try {
            gen = (BasicCodeGenerator)clazz.newInstance();
        } catch (Exception e) {
            throw new MojoFailureException("Failed to instantiate code generator " + clazz, e);
        }

        LOG.debug("{} Code generator instantiated from {}", codegenClass);
        return new CodeGeneratorTask(gen, cfg);
    }

    @Override
    void setBuildContext(final BuildContext buildContext) {
        if (gen instanceof BuildContextAware) {
            ((BuildContextAware)gen).setBuildContext(buildContext);
        }
    }

    @Override
    void initialize(final MavenProject project, final ContextHolder context) {
        this.context = Preconditions.checkNotNull(context);

        if (gen instanceof MavenProjectAware) {
            ((MavenProjectAware)gen).setMavenProject(project);
        }

        LOG.debug("Project root dir is {}", project.getBasedir());
        LOG.debug("Additional configuration picked up for : {}: {}", gen.getClass(), cfg.getAdditionalConfiguration());

        outputDir = cfg.getOutputBaseDir(project);
        project.addCompileSourceRoot(outputDir.getAbsolutePath());

        gen.setAdditionalConfig(cfg.getAdditionalConfiguration());
        File resourceBaseDir = cfg.getResourceBaseDir(project);

        Resource res = new Resource();
        res.setDirectory(resourceBaseDir.getPath());
        project.addResource(res);

        gen.setResourceBaseDir(resourceBaseDir);
        LOG.debug("{} Folder: {} marked as resources for generator: {}", resourceBaseDir, gen.getClass());
    }

    @Override
    public GeneratorResult call() throws Exception {
        LOG.debug("Sources will be generated to {}", outputDir);
        Collection<File> generated = gen.generateSources(context.getContext(), outputDir, context.getYangModules(),
            context::moduleToResourcePath);
        LOG.info("{} Sources generated by {}: {}", gen.getClass(), generated);

        // TODO Auto-generated method stub
        return null;
    }
}
