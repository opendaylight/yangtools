{
  "comments": [
    {
      "key": {
        "uuid": "9a245df4_a6c12856",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/MutableOffsetMap.java",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-11-04T03:34:49Z",
      "side": 1,
      "message": "VO_VOLATILE_INCREMENT",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_a6a8088e",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/MutableOffsetMap.java",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-11-04T03:35:42Z",
      "side": 1,
      "message": "http://jeremymanson.blogspot.ch/2007/08/volatile-does-not-mean-atomic.html",
      "parentUuid": "9a245df4_a6c12856",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_6c39c5d6",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/MutableOffsetMap.java",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 649
      },
      "writtenOn": "2017-11-07T14:50:58Z",
      "side": 1,
      "message": "See java.util.Collection fail-fast iterators, this is the same thing. There is no requirement of atomicity.\n\nFurthermore using an AtomicInteger will explode memory overhead.",
      "parentUuid": "9a245df4_a6c12856",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_037734a1",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/MutableOffsetMap.java",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-11-08T16:15:26Z",
      "side": 1,
      "message": "you sound like you think you know what you are doing, so @SuppressFBWarnings it is on this one instead then (with you justification copy/pasted as in-line code comment for posteriority).",
      "parentUuid": "9a245df4_6c39c5d6",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_06b3d40a",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/MutableOffsetMap.java",
        "patchSetId": 1
      },
      "lineNbr": 236,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-11-04T03:34:49Z",
      "side": 1,
      "message": "EC_BAD_ARRAY_COMPARE",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_0c50090a",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/MutableOffsetMap.java",
        "patchSetId": 1
      },
      "lineNbr": 236,
      "author": {
        "id": 649
      },
      "writtenOn": "2017-11-07T14:50:58Z",
      "side": 1,
      "message": "This is intentional, since we are managing lifecycle carefully, that compare is actually safe and accurate.",
      "parentUuid": "9a245df4_06b3d40a",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_c3323cf1",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/MutableOffsetMap.java",
        "patchSetId": 1
      },
      "lineNbr": 236,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-11-08T16:15:26Z",
      "side": 1,
      "message": "Kewl, but what would be the harm of using Arrays.equals() anywhere, to avoid flags from static code analyzers, who cannot be not as smart as you? ;) Performance really isn\u0027t an argument here, so why not?",
      "parentUuid": "9a245df4_0c50090a",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_46d02c1f",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/concurrent/AsyncNotifyingListenableFutureTask.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-11-04T03:34:49Z",
      "side": 1,
      "message": "NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_86c6a466",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/concurrent/CachedThreadPoolExecutor.java",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-11-04T03:34:49Z",
      "side": 1,
      "message": "BC_UNCONFIRMED_CAST_OF_RETURN_VALUE",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a245df4_66c3b057",
        "filename": "common/util/src/main/java/org/opendaylight/yangtools/util/concurrent/QueuedNotificationManager.java",
        "patchSetId": 1
      },
      "lineNbr": 306,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-11-04T03:34:49Z",
      "side": 1,
      "message": "RV_RETURN_VALUE_IGNORED_BAD_PRACTICE in line 313 on offer",
      "revId": "c5889dcd7aa650a416dd9644a82052a362ec77c3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}