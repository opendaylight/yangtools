{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2290bcb2_129a2ed9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 649
      },
      "writtenOn": "2023-03-27T12:40:48Z",
      "side": 1,
      "message": "this points to a different issue",
      "range": {
        "startLine": 14,
        "startChar": 16,
        "endLine": 14,
        "endChar": 20
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c128c396_59029613",
        "filename": "parser/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/repo/YangTextSchemaContextResolver.java",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 8894
      },
      "writtenOn": "2023-03-27T13:00:41Z",
      "side": 1,
      "message": "there is no bidirectional access (no key retrieval by value)\nso there is no reason using multimap, update to use simple Map,\nConcurrentHashMap can be taken as implementation",
      "range": {
        "startLine": 69,
        "startChar": 4,
        "endLine": 69,
        "endChar": 100
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdb1ca32_0455da24",
        "filename": "parser/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/repo/YangTextSchemaContextResolver.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 649
      },
      "writtenOn": "2023-03-27T19:51:00Z",
      "side": 1,
      "message": "this is too simplistic and will do the wrong thing if there are two overlapping registrations:\n\n  var mod \u003d QNameModule.create(...)\n  var foo \u003d QName.create(mod, \"foo\");\n  var bar \u003d QName.create(mod, \"bar\");\n  var baz \u003d QName.create(mod, \"baz\");\n  \n  var reg1 \u003d resolver.registerSupportedFeatures(mod, Set.of(foo, bar));\n  var reg2 \u003d resolver.registerSupportedFeatures(mod, Set.of(bar, baz));\n  \n  reg1.close();\n  \n  // Bad state: \u0027bar\u0027 is no longer registered, \u0027baz\u0027 still is, which does not correspond to what \u0027reg2\u0027 represents!",
      "range": {
        "startLine": 102,
        "startChar": 31,
        "endLine": 102,
        "endChar": 53
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa4762de_9c6a5996",
        "filename": "parser/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/repo/YangTextSchemaContextResolver.java",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 649
      },
      "writtenOn": "2023-03-27T19:51:00Z",
      "side": 1,
      "message": "nope, this has to be an AbstractRegistration, simply because AutoCloseable.close() can be legally called multiple times and the effect must be performed only once (\"idempotent\"). Please read Javadocs of any and all classes you encounter.",
      "range": {
        "startLine": 104,
        "startChar": 15,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92f83289_a3eb472b",
        "filename": "parser/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/repo/YangTextSchemaContextResolver.java",
        "patchSetId": 2
      },
      "lineNbr": 344,
      "author": {
        "id": 649
      },
      "writtenOn": "2023-03-27T12:36:28Z",
      "side": 1,
      "message": "err, no. this needs to be a custom implementation of java.util.Set",
      "range": {
        "startLine": 341,
        "startChar": 0,
        "endLine": 344,
        "endChar": 50
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dde9a8f_acb8e1ff",
        "filename": "parser/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/repo/YangTextSchemaContextResolver.java",
        "patchSetId": 2
      },
      "lineNbr": 344,
      "author": {
        "id": 8894
      },
      "writtenOn": "2023-03-27T13:00:41Z",
      "side": 1,
      "message": "a) .flatMap() concatenates streams\nb) it\u0027s recommended to iterate maps bya entries, \nbecause values() requires extra loop (over entries) to be produced\n\nreturn registeredFeatures.entrySet().stream()\n    .flatMap(entry -\u003e entry.getValue().stream())\n    .collect(Collectors.toSet());",
      "range": {
        "startLine": 340,
        "startChar": 8,
        "endLine": 344,
        "endChar": 50
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b013bb8b_ebc7520d",
        "filename": "parser/yang-parser-impl/src/main/java/org/opendaylight/yangtools/yang/parser/repo/YangTextSchemaContextResolver.java",
        "patchSetId": 2
      },
      "lineNbr": 344,
      "author": {
        "id": 649
      },
      "writtenOn": "2023-03-27T19:51:00Z",
      "side": 1,
      "message": "To be very explicit: the returned Set\u0027s contains() method must return true for any QName which is *NOT* present in registeredFeatures.",
      "parentUuid": "92f83289_a3eb472b",
      "range": {
        "startLine": 341,
        "startChar": 0,
        "endLine": 344,
        "endChar": 50
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5190a819_dd93356c",
        "filename": "parser/yang-parser-impl/src/test/java/org/opendaylight/yangtools/yang/parser/repo/YangTextSchemaContextResolverTest.java",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 8894
      },
      "writtenOn": "2023-03-27T13:00:41Z",
      "side": 1,
      "message": "these belong to different junit versions\nplease update to single one",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 59
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c90922a5_92bbe5a6",
        "filename": "parser/yang-parser-impl/src/test/java/org/opendaylight/yangtools/yang/parser/repo/YangTextSchemaContextResolverTest.java",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 8894
      },
      "writtenOn": "2023-03-27T13:00:41Z",
      "side": 1,
      "message": "this looks like a repeated piece of code, 4 times \u003d 4 test cases \n\neither extract repeated part to into separate private static method \nor convert a test into parameterized one (require test update to junit5)",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 140,
        "endChar": 0
      },
      "revId": "ef47aa4f722529ad4b013488557ed5152568e688",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}