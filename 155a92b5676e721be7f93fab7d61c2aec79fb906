{
  "comments": [
    {
      "key": {
        "uuid": "5a93c517_fd2b282e",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-25T23:45:07Z",
      "side": 1,
      "message": "forces instantiation of a Pattern, a Splitter.on(\u0027:\u0027), as a constant would be better.",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_5dfc9c3e",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T09:26:14Z",
      "side": 1,
      "message": "Ack. Next version will use a splitter.",
      "parentUuid": "5a93c517_fd2b282e",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_3dd99057",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-25T23:45:07Z",
      "side": 1,
      "message": "security risk: directly storing an array (see below)",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_bda04091",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1842
      },
      "writtenOn": "2015-03-26T00:06:14Z",
      "side": 1,
      "message": "For efficiency you don\u0027t want to clone it. I think whatever the security risk is worth bypassing for performance. Same as below. Just javadoc that it takes ownership.",
      "parentUuid": "5a93c517_3dd99057",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_bdffe033",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T09:26:14Z",
      "side": 1,
      "message": "Based on auditing the code so far all of the usage is inline - byte arrays instantiated from reading a ByteBuf as byte[] and consumed straight away. There is no other users. I agree with Tom - for the use pattern presently in place it\u0027s worth it.",
      "parentUuid": "5a93c517_bda04091",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_55e9d47e",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-26T13:23:16Z",
      "side": 1,
      "message": "A clone when not needed can be optimized away by JIT. We cannot make assumptions about current usage of in-tree users. The general contract of these classes is that they are immutable. If we allow for an avenue for the data to be modified outside of the normal lifecycle, we will have to make a defensive copy when crossing BI/BA barrier -- which is far from the actual user, so runtime will probably be not able to eliminate that copy.",
      "parentUuid": "5a93c517_bdffe033",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_d5588458",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1842
      },
      "writtenOn": "2015-03-26T13:50:58Z",
      "side": 1,
      "message": "Can you point to documentation re: \"A clone when not needed can be optimized away by JIT\"? In any event, you state JIT CAN optimize but no guarantee.\n\nIn theory you\u0027re right about immutability and safety. In reality, I don\u0027t see why anyone would modify the contents of the byte[] after passing to the ctor. We can document that it takes ownership. In the end theory is fine but we also need to build practical and performant software. \n\nI ran into defensive copying of byte[] on ingress and egress with the profobuff code and, while safe, it\u0027s grossly inefficient - I had to work around it. I wish they provided APIs to forego the defensive copying when I know I won\u0027t be modifying it (and doesn\u0027t make sense to), i.e. let the user decide whether they need defensive safety or not.",
      "parentUuid": "5a93c517_55e9d47e",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_b8860d64",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1842
      },
      "writtenOn": "2015-03-26T14:15:34Z",
      "side": 1,
      "message": "Perhaps we could make the byte[] ctor private and have static factory methods for constructing a safe MacAddress that clones and an \"unsafe\" one that doesn\u0027t. So let the user decide which version they want at their own peril.",
      "parentUuid": "5a93c517_d5588458",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_9d20e44a",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-25T23:45:07Z",
      "side": 1,
      "message": "String.format() is major overhead, as it needs to be parsed. a lookup table would be better.",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_f5182077",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T09:26:14Z",
      "side": 1,
      "message": "I had a look at possible alternatives. When you read the source of Interger.toHexString() and add-up the overhead of pushing all the results through a string builder the difference is not that big. It will also make the code unreadable which is not what we would want at this stage. I suggest we park this particular one for later.",
      "parentUuid": "5a93c517_9d20e44a",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_15b02c42",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1842
      },
      "writtenOn": "2015-03-26T10:33:32Z",
      "side": 1,
      "message": "You could use a single format call:\n\n String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\", _binary_form[0], _binary_form[1]), ....);\n\nIt\u0027s brute force but probably more efficient than multiple calls plus you wouldn\u0027t need the overhead of your own StringBuilder either.",
      "parentUuid": "5a93c517_f5182077",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_75809046",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T10:44:01Z",
      "side": 1,
      "message": "That is exactly what I was going to do in the next rev :)",
      "parentUuid": "5a93c517_15b02c42",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_95967cef",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-26T13:23:16Z",
      "side": 1,
      "message": "how about doing it *really* efficiently?\n\nprivate static final char[] TABLE \u003d \"01234567890abcdef\".toCharArray();\n\nsb.append(TABLE[_binary_form[i] \u003e\u003e\u003e 4]);\nsb.append(TABLE[_binary_form[i] \u0026 0xf]);",
      "parentUuid": "5a93c517_75809046",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_7d1718ee",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-25T23:45:07Z",
      "side": 1,
      "message": "security risk, introduces a TOCTOU race as users can perform System.arrayCopy() to mutate the data. We really need to decide what class to use for enforcing read-only view of a byte[].",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_1d9614f1",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T09:26:14Z",
      "side": 1,
      "message": "Long term - I agree with you as we can and should integrate bitops, etc into that. I looked at BigInteger, it is horrid and there is nothing else out there at present.\nShort term - all of this is used inline (as in the examples posted on the bug) so there is no race in the current code which uses it.",
      "parentUuid": "5a93c517_7d1718ee",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_9de78412",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-25T23:45:07Z",
      "side": 1,
      "message": "it seems _binary_form is known to be non-null",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_3d9bd019",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T09:26:14Z",
      "side": 1,
      "message": "Cut-n-paste from yang generated code. Will fix in next revision.",
      "parentUuid": "5a93c517_9de78412",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_bd1da011",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 185,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-25T23:45:07Z",
      "side": 1,
      "message": "duplicated code with getValue()",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_dd9f4c02",
        "filename": "model/ietf/ietf-yang-types/accelerate/data/MacAddress.java",
        "patchSetId": 3
      },
      "lineNbr": 185,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T09:26:14Z",
      "side": 1,
      "message": "Ack. Will fix in next revision.",
      "parentUuid": "5a93c517_bd1da011",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_7dee38ee",
        "filename": "model/ietf/ietf-yang-types/accelerate/replace.sh",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-25T23:45:07Z",
      "side": 1,
      "message": "how will this work on windows?",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_fda48858",
        "filename": "model/ietf/ietf-yang-types/accelerate/replace.sh",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T09:26:14Z",
      "side": 1,
      "message": "Do we support building on windows? Building, not running. I can rewrite it as python (it is already used somewhere, I think in of).",
      "parentUuid": "5a93c517_7dee38ee",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_d5e5e4a8",
        "filename": "model/ietf/ietf-yang-types/accelerate/replace.sh",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-26T13:23:16Z",
      "side": 1,
      "message": "yes we do, and we do not currently require anything but maven. I think we need to find a better solution to this entire problem :-/",
      "parentUuid": "5a93c517_fda48858",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_1dbb74e6",
        "filename": "model/ietf/ietf-yang-types/accelerate/replace.sh",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 649
      },
      "writtenOn": "2015-03-25T23:45:07Z",
      "side": 1,
      "message": "out copyright headers usually inline EPL and a reference to it.",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_9d89c4cc",
        "filename": "model/ietf/ietf-yang-types/accelerate/replace.sh",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 2774
      },
      "writtenOn": "2015-03-26T09:26:14Z",
      "side": 1,
      "message": "Ack. Will fix in next revision.",
      "parentUuid": "5a93c517_1dbb74e6",
      "revId": "155a92b5676e721be7f93fab7d61c2aec79fb906",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}